{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.colorScheme = void 0;\nconst react_native_1 = require(\"react-native-web/dist/index\");\nconst shared_1 = require(\"../../shared\");\nconst observable_1 = require(\"../observable\");\nconst stylesheet_1 = require(\"./stylesheet\");\nlet appearance = react_native_1.Appearance;\nlet appearanceListener;\nconst darkModeFlag = stylesheet_1.StyleSheet.getFlag(\"darkMode\");\nlet darkMode;\nlet darkModeValue;\nlet initialColor = undefined;\nif (darkModeFlag) {\n  const flags = darkModeFlag.split(\" \");\n  darkMode = flags[0];\n  darkModeValue = flags[1];\n  if (darkMode === \"class\") {\n    initialColor = \"window\" in globalThis.window && globalThis.window.document.documentElement.classList.contains(darkModeValue) ? \"dark\" : \"light\";\n  }\n} else if (\"window\" in globalThis) {\n  const headNode = globalThis.window.document.getElementsByTagName(\"head\")[0];\n  new MutationObserver(function (_, observer) {\n    const darkModeFlag = stylesheet_1.StyleSheet.getFlag(\"darkMode\");\n    if (!darkModeFlag) return;\n    observer.disconnect();\n    const flags = darkModeFlag.split(\" \");\n    darkMode = flags[0];\n    darkModeValue = flags[1];\n    exports.colorScheme.set(globalThis.window.document.documentElement.classList.contains(darkModeValue) ? \"dark\" : \"system\");\n  }).observe(headNode, {\n    attributes: false,\n    childList: true,\n    subtree: false\n  });\n}\nconst systemColorScheme = (0, observable_1.observable)(appearance.getColorScheme() ?? \"light\");\nconst colorSchemeObservable = (0, observable_1.observable)(initialColor, {\n  fallback: systemColorScheme\n});\nexports.colorScheme = {\n  set(value) {\n    if (darkMode === \"media\") {\n      throw new Error(\"Cannot manually set color scheme, as dark mode is type 'media'. Please use StyleSheet.setFlag('darkMode', 'class')\");\n    }\n    if (!globalThis.window) {\n      throw new Error(\"Cannot manually set color scheme while not in a browser environment.\");\n    }\n    if (value === \"system\") {\n      colorSchemeObservable.set(undefined);\n    } else {\n      colorSchemeObservable.set(value);\n    }\n    if (darkModeValue) {\n      if (value === \"dark\") {\n        globalThis.window?.document.documentElement.classList.add(darkModeValue);\n      } else {\n        globalThis.window?.document.documentElement.classList.remove(darkModeValue);\n      }\n    }\n  },\n  get: colorSchemeObservable.get,\n  toggle() {\n    let current = colorSchemeObservable.get();\n    if (current === undefined) current = appearance.getColorScheme() ?? \"light\";\n    exports.colorScheme.set(current === \"light\" ? \"dark\" : \"light\");\n  },\n  [shared_1.INTERNAL_RESET]: appearance => {\n    colorSchemeObservable.set(undefined);\n    resetAppearanceListeners(appearance);\n  }\n};\nfunction resetAppearanceListeners($appearance) {\n  appearance = $appearance;\n  appearanceListener?.remove();\n  appearanceListener = appearance.addChangeListener(state => {\n    if (react_native_1.AppState.currentState === \"active\") {\n      systemColorScheme.set(state.colorScheme ?? \"light\");\n    }\n  });\n}\nresetAppearanceListeners(appearance);","map":{"version":3,"names":["shared_1","require","observable_1","stylesheet_1","appearance","react_native_1","Appearance","appearanceListener","darkModeFlag","StyleSheet","getFlag","darkMode","darkModeValue","initialColor","undefined","flags","split","globalThis","window","document","documentElement","classList","contains","headNode","getElementsByTagName","MutationObserver","_","observer","disconnect","exports","colorScheme","set","observe","attributes","childList","subtree","systemColorScheme","observable","getColorScheme","colorSchemeObservable","fallback","value","Error","add","remove","get","toggle","current","INTERNAL_RESET","resetAppearanceListeners","$appearance","addChangeListener","state","AppState","currentState"],"sources":["C:\\Users\\RYZEN 7\\Documents\\Code\\styles_test\\example_app\\AwesomeProject\\node_modules\\react-native-css-interop\\src\\runtime\\web\\color-scheme.ts"],"sourcesContent":["import { Appearance, AppState, NativeEventSubscription } from \"react-native\";\n\nimport { INTERNAL_RESET } from \"../../shared\";\nimport { observable } from \"../observable\";\nimport { StyleSheet } from \"./stylesheet\";\n\nlet appearance = Appearance;\nlet appearanceListener: NativeEventSubscription | undefined;\n\nconst darkModeFlag = StyleSheet.getFlag(\"darkMode\");\n\nlet darkMode: string | undefined;\nlet darkModeValue: string | undefined;\nlet initialColor: \"light\" | \"dark\" | undefined = undefined;\n\nif (darkModeFlag) {\n  const flags = darkModeFlag.split(\" \");\n  darkMode = flags[0];\n  darkModeValue = flags[1];\n\n  if (darkMode === \"class\") {\n    initialColor =\n      \"window\" in globalThis.window &&\n      globalThis.window.document.documentElement.classList.contains(\n        darkModeValue,\n      )\n        ? \"dark\"\n        : \"light\";\n  }\n} else if (\"window\" in globalThis) {\n  // In development, Expo might insert the StyleSheet AFTER this code runs.\n  // Instead we watch for the stylesheet being added\n  const headNode = globalThis.window.document.getElementsByTagName(\"head\")[0];\n  new MutationObserver(function (_, observer) {\n    // We don't actually care what the mutation is, just wait until we have a darkMode setting\n    const darkModeFlag = StyleSheet.getFlag(\"darkMode\");\n    if (!darkModeFlag) return;\n\n    // We have the flag, so we can remove the observer\n    observer.disconnect();\n    const flags = darkModeFlag.split(\" \");\n    darkMode = flags[0];\n    darkModeValue = flags[1];\n    colorScheme.set(\n      globalThis.window.document.documentElement.classList.contains(\n        darkModeValue,\n      )\n        ? \"dark\"\n        : \"system\",\n    );\n  }).observe(headNode, { attributes: false, childList: true, subtree: false });\n}\n\nconst systemColorScheme = observable<\"light\" | \"dark\">(\n  appearance.getColorScheme() ?? \"light\",\n);\n\nconst colorSchemeObservable = observable<\"light\" | \"dark\" | undefined>(\n  initialColor,\n  { fallback: systemColorScheme },\n);\n\nexport const colorScheme = {\n  set(value: \"light\" | \"dark\" | \"system\") {\n    if (darkMode === \"media\") {\n      throw new Error(\n        \"Cannot manually set color scheme, as dark mode is type 'media'. Please use StyleSheet.setFlag('darkMode', 'class')\",\n      );\n    }\n\n    if (!globalThis.window) {\n      throw new Error(\n        \"Cannot manually set color scheme while not in a browser environment.\",\n      );\n    }\n\n    if (value === \"system\") {\n      colorSchemeObservable.set(undefined);\n    } else {\n      colorSchemeObservable.set(value);\n    }\n\n    if (darkModeValue) {\n      if (value === \"dark\") {\n        globalThis.window?.document.documentElement.classList.add(\n          darkModeValue,\n        );\n      } else {\n        globalThis.window?.document.documentElement.classList.remove(\n          darkModeValue,\n        );\n      }\n    }\n  },\n  get: colorSchemeObservable.get,\n  toggle() {\n    let current = colorSchemeObservable.get();\n    if (current === undefined) current = appearance.getColorScheme() ?? \"light\";\n    colorScheme.set(current === \"light\" ? \"dark\" : \"light\");\n  },\n  [INTERNAL_RESET]: (appearance: typeof Appearance) => {\n    colorSchemeObservable.set(undefined);\n    resetAppearanceListeners(appearance);\n  },\n};\n\nfunction resetAppearanceListeners($appearance: typeof Appearance) {\n  appearance = $appearance;\n  appearanceListener?.remove();\n  appearanceListener = appearance.addChangeListener((state) => {\n    if (AppState.currentState === \"active\") {\n      systemColorScheme.set(state.colorScheme ?? \"light\");\n    }\n  });\n}\nresetAppearanceListeners(appearance);\n"],"mappings":";;;;;;;AAEA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AAEA,IAAIG,UAAU,GAAGC,cAAA,CAAAC,UAAU;AAC3B,IAAIC,kBAAuD;AAE3D,MAAMC,YAAY,GAAGL,YAAA,CAAAM,UAAU,CAACC,OAAO,CAAC,UAAU,CAAC;AAEnD,IAAIC,QAA4B;AAChC,IAAIC,aAAiC;AACrC,IAAIC,YAAY,GAAiCC,SAAS;AAE1D,IAAIN,YAAY,EAAE;EAChB,MAAMO,KAAK,GAAGP,YAAY,CAACQ,KAAK,CAAC,GAAG,CAAC;EACrCL,QAAQ,GAAGI,KAAK,CAAC,CAAC,CAAC;EACnBH,aAAa,GAAGG,KAAK,CAAC,CAAC,CAAC;EAExB,IAAIJ,QAAQ,KAAK,OAAO,EAAE;IACxBE,YAAY,GACV,QAAQ,IAAII,UAAU,CAACC,MAAM,IAC7BD,UAAU,CAACC,MAAM,CAACC,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,QAAQ,CAC3DV,aAAa,CACd,GACG,MAAM,GACN,OAAO;EACf;AACF,CAAC,MAAM,IAAI,QAAQ,IAAIK,UAAU,EAAE;EAGjC,MAAMM,QAAQ,GAAGN,UAAU,CAACC,MAAM,CAACC,QAAQ,CAACK,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;EAC3E,IAAIC,gBAAgB,CAAC,UAAUC,CAAC,EAAEC,QAAQ;IAExC,MAAMnB,YAAY,GAAGL,YAAA,CAAAM,UAAU,CAACC,OAAO,CAAC,UAAU,CAAC;IACnD,IAAI,CAACF,YAAY,EAAE;IAGnBmB,QAAQ,CAACC,UAAU,EAAE;IACrB,MAAMb,KAAK,GAAGP,YAAY,CAACQ,KAAK,CAAC,GAAG,CAAC;IACrCL,QAAQ,GAAGI,KAAK,CAAC,CAAC,CAAC;IACnBH,aAAa,GAAGG,KAAK,CAAC,CAAC,CAAC;IACxBc,OAAA,CAAAC,WAAW,CAACC,GAAG,CACbd,UAAU,CAACC,MAAM,CAACC,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,QAAQ,CAC3DV,aAAa,CACd,GACG,MAAM,GACN,QAAQ,CACb;EACH,CAAC,CAAC,CAACoB,OAAO,CAACT,QAAQ,EAAE;IAAEU,UAAU,EAAE,KAAK;IAAEC,SAAS,EAAE,IAAI;IAAEC,OAAO,EAAE;EAAK,CAAE,CAAC;AAC9E;AAEA,MAAMC,iBAAiB,GAAG,IAAAlC,YAAA,CAAAmC,UAAU,EAClCjC,UAAU,CAACkC,cAAc,EAAE,IAAI,OAAO,CACvC;AAED,MAAMC,qBAAqB,GAAG,IAAArC,YAAA,CAAAmC,UAAU,EACtCxB,YAAY,EACZ;EAAE2B,QAAQ,EAAEJ;AAAiB,CAAE,CAChC;AAEYP,OAAA,CAAAC,WAAW,GAAG;EACzBC,GAAGA,CAACU,KAAkC;IACpC,IAAI9B,QAAQ,KAAK,OAAO,EAAE;MACxB,MAAM,IAAI+B,KAAK,CACb,oHAAoH,CACrH;IACH;IAEA,IAAI,CAACzB,UAAU,CAACC,MAAM,EAAE;MACtB,MAAM,IAAIwB,KAAK,CACb,sEAAsE,CACvE;IACH;IAEA,IAAID,KAAK,KAAK,QAAQ,EAAE;MACtBF,qBAAqB,CAACR,GAAG,CAACjB,SAAS,CAAC;IACtC,CAAC,MAAM;MACLyB,qBAAqB,CAACR,GAAG,CAACU,KAAK,CAAC;IAClC;IAEA,IAAI7B,aAAa,EAAE;MACjB,IAAI6B,KAAK,KAAK,MAAM,EAAE;QACpBxB,UAAU,CAACC,MAAM,EAAEC,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACsB,GAAG,CACvD/B,aAAa,CACd;MACH,CAAC,MAAM;QACLK,UAAU,CAACC,MAAM,EAAEC,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACuB,MAAM,CAC1DhC,aAAa,CACd;MACH;IACF;EACF,CAAC;EACDiC,GAAG,EAAEN,qBAAqB,CAACM,GAAG;EAC9BC,MAAMA,CAAA;IACJ,IAAIC,OAAO,GAAGR,qBAAqB,CAACM,GAAG,EAAE;IACzC,IAAIE,OAAO,KAAKjC,SAAS,EAAEiC,OAAO,GAAG3C,UAAU,CAACkC,cAAc,EAAE,IAAI,OAAO;IAC3ET,OAAA,CAAAC,WAAW,CAACC,GAAG,CAACgB,OAAO,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EACzD,CAAC;EACD,CAAC/C,QAAA,CAAAgD,cAAc,GAAI5C,UAA6B,IAAI;IAClDmC,qBAAqB,CAACR,GAAG,CAACjB,SAAS,CAAC;IACpCmC,wBAAwB,CAAC7C,UAAU,CAAC;EACtC;CACD;AAED,SAAS6C,wBAAwBA,CAACC,WAA8B;EAC9D9C,UAAU,GAAG8C,WAAW;EACxB3C,kBAAkB,EAAEqC,MAAM,EAAE;EAC5BrC,kBAAkB,GAAGH,UAAU,CAAC+C,iBAAiB,CAAEC,KAAK,IAAI;IAC1D,IAAI/C,cAAA,CAAAgD,QAAQ,CAACC,YAAY,KAAK,QAAQ,EAAE;MACtClB,iBAAiB,CAACL,GAAG,CAACqB,KAAK,CAACtB,WAAW,IAAI,OAAO,CAAC;IACrD;EACF,CAAC,CAAC;AACJ;AACAmB,wBAAwB,CAAC7C,UAAU,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}