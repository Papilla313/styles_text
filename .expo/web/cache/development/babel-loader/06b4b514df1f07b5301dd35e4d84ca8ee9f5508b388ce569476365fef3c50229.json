{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = wrapJSX;\nconst api_1 = require(\"./api\");\nconst react_native_safe_area_context_1 = require(\"./third-party-libs/react-native-safe-area-context\");\nfunction wrapJSX(jsx) {\n  return function (type, props, ...rest) {\n    if (type === \"react-native-css-interop-jsx-pragma-check\") {\n      return true;\n    }\n    if (process.env.NODE_ENV !== \"test\") require(\"./components\");\n    type = (0, react_native_safe_area_context_1.maybeHijackSafeAreaProvider)(type);\n    if (props && props.cssInterop === false) {\n      delete props.cssInterop;\n    } else {\n      type = api_1.interopComponents.get(type) ?? type;\n    }\n    return jsx.call(jsx, type, props, ...rest);\n  };\n}","map":{"version":3,"names":["exports","default","wrapJSX","api_1","require","react_native_safe_area_context_1","jsx","type","props","rest","process","env","NODE_ENV","maybeHijackSafeAreaProvider","cssInterop","interopComponents","get","call"],"sources":["C:\\Users\\RYZEN 7\\Documents\\Code\\styles_test\\example_app\\AwesomeProject\\node_modules\\react-native-css-interop\\src\\runtime\\wrap-jsx.ts"],"sourcesContent":["import type { JSXFunction } from \"../types\";\nimport { interopComponents } from \"./api\";\nimport { maybeHijackSafeAreaProvider } from \"./third-party-libs/react-native-safe-area-context\";\n\n/**\n * Create a new JSX function that swaps the component type being rendered with\n * the 'interop' version of the component if it exists.\n */\nexport default function wrapJSX(jsx: JSXFunction): JSXFunction {\n  return function (type, props, ...rest) {\n    // This is invalid react code. Its used by the doctor to check if the JSX pragma is set correctly\n    if ((type as any) === \"react-native-css-interop-jsx-pragma-check\") {\n      return true as any;\n    }\n\n    // Load the core React Native components and create the interop versions\n    // We avoid this in the test environment as we want more fine-grained control\n    // This call also need to be inside the JSX transform to avoid circular dependencies\n    if (process.env.NODE_ENV !== \"test\") require(\"./components\");\n\n    type = maybeHijackSafeAreaProvider(type);\n\n    // You can disable the css interop by setting `cssInterop` to false\n    if (props && props.cssInterop === false) {\n      delete props.cssInterop;\n    } else {\n      // Swap the component type with the interop version if it exists\n      type = interopComponents.get(type) ?? type;\n    }\n\n    // Call the original jsx function with the new type\n    return jsx.call(jsx, type, props, ...rest);\n  };\n}\n"],"mappings":";;;;;AAQAA,OAAA,CAAAC,OAAA,GAAAC,OAAA;AAPA,MAAAC,KAAA,GAAAC,OAAA;AACA,MAAAC,gCAAA,GAAAD,OAAA;AAMA,SAAwBF,OAAOA,CAACI,GAAgB;EAC9C,OAAO,UAAUC,IAAI,EAAEC,KAAK,EAAE,GAAGC,IAAI;IAEnC,IAAKF,IAAY,KAAK,2CAA2C,EAAE;MACjE,OAAO,IAAW;IACpB;IAKA,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAER,OAAO,CAAC,cAAc,CAAC;IAE5DG,IAAI,GAAG,IAAAF,gCAAA,CAAAQ,2BAA2B,EAACN,IAAI,CAAC;IAGxC,IAAIC,KAAK,IAAIA,KAAK,CAACM,UAAU,KAAK,KAAK,EAAE;MACvC,OAAON,KAAK,CAACM,UAAU;IACzB,CAAC,MAAM;MAELP,IAAI,GAAGJ,KAAA,CAAAY,iBAAiB,CAACC,GAAG,CAACT,IAAI,CAAC,IAAIA,IAAI;IAC5C;IAGA,OAAOD,GAAG,CAACW,IAAI,CAACX,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAE,GAAGC,IAAI,CAAC;EAC5C,CAAC;AACH","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}